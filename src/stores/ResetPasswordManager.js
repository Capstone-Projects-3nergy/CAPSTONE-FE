import { defineStore } from 'pinia'
import { ref } from 'vue'
import { auth } from '@/firebase/firebaseConfig'
import { sendPasswordResetEmail } from 'firebase/auth'

export const useResetPasswordManager = defineStore(
  'ResetPasswordManager',
  () => {
    // üü¶ State
    const loading = ref(false)
    const successMessage = ref('')
    const errorMessage = ref('')

    // üü® Action: ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
    const sendResetEmail = async (email) => {
      loading.value = true
      successMessage.value = ''
      errorMessage.value = ''

      try {
        await sendPasswordResetEmail(auth, email)
        successMessage.value = 'üìß Reset password email sent successfully!'
      } catch (error) {
        console.error('‚ùå Reset password error:', error)

        // üîπ ‡πÅ‡∏õ‡∏•‡∏á error code ‡∏Ç‡∏≠‡∏á Firebase ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
        switch (error.code) {
          case 'auth/invalid-email':
            errorMessage.value = 'Invalid email format.'
            break
          case 'auth/user-not-found':
            errorMessage.value = 'No user found with this email.'
            break
          default:
            errorMessage.value = 'Failed to send reset email. Please try again.'
        }
      } finally {
        loading.value = false
      }
    }

    return {
      // State
      loading,
      successMessage,
      errorMessage,
      // Actions
      sendResetEmail
    }
  }
)
